<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team4.sns.mapper.PostMapper">
    
    <resultMap id="postResultMap" type="com.team4.sns.vo.Post">
        <id column="id" property="id"/>
        <result column="content" property="content"/>
        <result column="created_at" property="createdAt"/>
        <result column="user_id" property="user.id"/>
        <result column="user_image_url" property="user.imageUrl"/>
        <result column="user_name" property="user.name"/>
        <result column="user_nickname" property="user.nickname"/>
        <collection property="postImageList" column="id" select="selectImageList"/>
        <collection property="likeNum" column="id" select="countLikeNumByPostId"/>
        <collection property="commentNum" column="id" select="countCommentNumByPostId"/>
        <collection property="shareNum" column="id" select="countShareNumByPostId"/>
    </resultMap>

    <select id="getPostList" resultMap="postResultMap">
        select
            p.id,
            p.content,
            p.created_at,
            u.id as user_id,
            u.image_url as user_image_url,
            u.name as user_name,
            u.nickname as user_nickname
        from user u
                 inner join post p
                            on u.id = p.user_id
        <choose>
            <when test="userId == null">
                where u.is_deleted=0 and p.is_deleted=0
            </when>
            <otherwise>
                WHERE u.id in (
                SELECT followed_user_id
                FROM follow
                WHERE user_id = #{userId}
                )
                AND u.is_deleted=0 and p.is_deleted=0
            </otherwise>
        </choose>
        ORDER BY p.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getPostByKeyword" resultMap="postResultMap">
        select
            p.id,
            p.content,
            p.created_at,
            u.id as user_id,
            u.image_url as user_image_url,
            u.name as user_name,
            u.nickname as user_nickname
        from user u
                 inner join post p
                            on u.id = p.user_id
        where p.content like concat('%', #{keyword}, '%')
            and u.is_deleted = 0
            and p.is_deleted=0;
    </select>

    <select id="selectImageList" resultType="java.lang.String">
        SELECT post_image_url
        FROM post_image
        WHERE post_id=#{id} AND is_deleted=0;
    </select>

    <select id="countLikeNumByPostId" resultType="java.lang.Integer">
        select count(*)
        from post_like
        where post_id=#{id} and is_deleted=0;
    </select>

    <select id="countCommentNumByPostId" resultType="java.lang.Integer">
        SELECT count(*)
        FROM comment
        Where post_id=#{id} and is_deleted=0;
    </select>

    <select id="countShareNumByPostId" resultType="java.lang.Integer">
        SELECT count(*)
        FROM post_share
        Where post_id=#{id} and is_deleted=0;
    </select>

    <insert id="writePost" parameterType="com.team4.sns.vo.Post">
        INSERT INTO post(user_id, content)
        VALUES (#{post.userId}, #{post.content})
        <selectKey keyProperty="post.id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="deletePost" parameterType="java.lang.Long">
        UPDATE post
        SET is_deleted=1
        WHERE id=#{postId};

        UPDATE post_image
        SET is_deleted=1
        WHERE post_id=#{postId} AND is_deleted=0;
    </update>

    <update id="modifyPost">
        UPDATE post
        SET content=#{post.content}
        WHERE id=#{postId} and is_deleted=0;
    </update>

    <select id="getMyPost" resultMap="postResultMap">
        select
            p.id,
            p.content,
            p.created_at,
            u.id as user_id,
            u.image_url as user_image_url,
            u.name as user_name,
            u.nickname as user_nickname
        from user u
                 inner join post p
                            on u.id = p.user_id
        where user_id=#{userId}
            LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getMyLikePostList" resultMap="postResultMap">
        select
            p.id,
            p.content,
            p.created_at,
            u.id as user_id,
            u.image_url as user_image_url,
            u.name as user_name,
            u.nickname as user_nickname
        from user u
                 inner join post p
                            on u.id = p.user_id
        where p.id in (
            select post_id
            from post_like
            where user_id=#{userId} and is_deleted=0
            )
            LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getMyCommentPostList" resultMap="postResultMap">
        select
            p.id,
            p.content,
            p.created_at,
            u.id as user_id,
            u.image_url as user_image_url,
            u.name as user_name,
            u.nickname as user_nickname
        from user u
                 inner join post p
                            on u.id = p.user_id
        where p.id in (
            select post_id
            from comment
            where user_id=#{userId} and is_deleted=0
        )
            LIMIT #{limit} OFFSET #{offset}
    </select>

    <insert id="sharePost">
        INSERT INTO post_share(user_id, post_id)
        VALUES (#{userId}, #{postId})
    </insert>

    <select id="isSharedPost" resultType="java.lang.Boolean">
        SELECT EXISTS
        ( SELECT id
          FROM post_share
          WHERE user_id=#{userId}
            AND post_id=#{postId}
            AND is_deleted=0
        )
    </select>

    <update id="deleteSharePost">
        UPDATE post_share
        SET is_deleted=1
        WHERE user_id=#{userId}
            AND post_id=#{postId}
            AND is_deleted=0
    </update>

</mapper>

